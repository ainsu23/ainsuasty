{
  "hash": "3bdf417db4b64136d8fc0660a543fd51",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"PowerBI Leverage with R\"\ndescription: \"Leverage PowerBI apps with R\" \ncategories: [\"PowerBI\", \"R\", \"functions\"]\ncomments: \n  utterances: \n    repo: ainsu23/ainsuasty\nformat: \n  html: \n    css: [\"../../css/base.css\"]\n---\n\n\n**PowerBI it's a completed tool for creating dashboard, nevertheless, you\ncan make it so much more completed leveraging with others languages, such as, R\nor Python.**\n\n----- \n\n## Ryan E Wade conference\nWhen at my work I was assigned to co-created a dashboard in powerBI, I inmediately \nremember the confrence from **Ryan E Wade** about levering powerBI with R.\n[![](/image/PowerBI_Leveraging_R.PNG){fig-align=\"center\"}](https://www.rstudio.com/conference/2022/talks/tidyverse-power-bi-match-made/)\n\n## Comparing sales within months  - dashboard\nThis blog contains a very simple dashboard with just one table, my purpose indeed,\nit is just to show how with R we can create as many columns with hexcode colors to\nmake change a color of a column automatically, making the dashboard reproducible in\nthe time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n### Table Sales\n![](/image/PowerBi_Sales.PNG){fig-align=\"center\"}\nA sales table was created with just seller_id, month and the sales made. \n\nAfter that, two columns were created to store `sales_avg` and `delays_avg`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nSales <- tibble::tribble(\n  ~seller_id, ~month, ~sales, ~delays_percentage,\n  1, 2, 200,0.2,\n  1, 1, 400,0.04,\n  1, 3, 140,0.29,\n  1, 4, 390,0.11,\n  1, 5, 260,0.34,\n  1, 6, 130,0.23,\n  2, 1, 300,0.1,\n  2, 2, 317,0.07,\n  2, 3, 263,0.13,\n  2, 4, 142,0.21,\n  2, 5, 361,0.03,\n  2, 6, 134,0.16,\n  3, 1, 124,0.25,\n  3, 2, 374,0.23,\n  3, 3, 762,0.2,\n  3, 4, 163,0.27,\n  3, 5, 186,0.12,\n  3, 6, 177,0.09,\n) %>% \n  as.data.frame() %>% \n  mutate(\n      sales_avg = round(mean(sales), 1),\n      delays_avg = round(mean(delays_percentage), 2)        \n  ) \n\nSales\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   seller_id month sales delays_percentage sales_avg delays_avg\n1          1     2   200              0.20     267.9       0.17\n2          1     1   400              0.04     267.9       0.17\n3          1     3   140              0.29     267.9       0.17\n4          1     4   390              0.11     267.9       0.17\n5          1     5   260              0.34     267.9       0.17\n6          1     6   130              0.23     267.9       0.17\n7          2     1   300              0.10     267.9       0.17\n8          2     2   317              0.07     267.9       0.17\n9          2     3   263              0.13     267.9       0.17\n10         2     4   142              0.21     267.9       0.17\n11         2     5   361              0.03     267.9       0.17\n12         2     6   134              0.16     267.9       0.17\n13         3     1   124              0.25     267.9       0.17\n14         3     2   374              0.23     267.9       0.17\n15         3     3   762              0.20     267.9       0.17\n16         3     4   163              0.27     267.9       0.17\n17         3     5   186              0.12     267.9       0.17\n18         3     6   177              0.09     267.9       0.17\n```\n\n\n:::\n:::\n\n\n### Creation of new columns \n![](/image/PowerBI_Compare_function.PNG){fig-align=\"center\"}\n\nThe principal idea of the following function called `compare` it's to generate\nthe number of columns that the final user wants to compare and generate de hexcode\ncolumn to apply functional conditions in PowerBI.\n\n::: {.panel-tabset}\n\n## function\nThe compare function get a table, 2 columns to compare and the function to \napply. Returns a dataframe with a hexcode color column.\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare <- function(.base, .column1, .column2, .f) {\n  column <- paste0(\"color_\",{{ .column1}})\n  funcion <- .Primitive({{ .f }})\n  maximo <- .f == \"max\"\n\n base2 <- .base %>%\n    mutate(\n      {{ column }} := ifelse(\n            !!rlang::sym(.column1) >= funcion(!!rlang::sym(.column2), na.rm = TRUE),  \n            ifelse(maximo, \"#FF0000\", \"#00FF00\"),\n            ifelse(!maximo, \"#00FF00\",\"#FF0000\")\n      )\n    ) %>%\n    ungroup() %>%\n    select({{ column }})\n  return(base2)\n}\n```\n:::\n\n\n## Final table\nStore the columns you want to compare in column1 and column2, also, write the \nfunction you wants to apply (max or min). \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolumn1 <- list(\"sales\", \"delays_percentage\")\ncolumn2 <- list(\"sales_avg\", \"delays_avg\")\n.f<- list(\"max\", \"min\")\n\n# Iterate through list of lists with pmap\ntabla <- purrr::pmap(\n  .l = list(column1, column2, .f),\n  .f = function(.x, .y, .z){\n    Sales %>%\n        compare(.x, .y, .z)\n  }\n) %>%\n  # Convert list into a dataframe\n  purrr::flatten_df() %>%\n  # column bind base with new columns flatten\n  cbind(Sales, .)\n\ntabla\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   seller_id month sales delays_percentage sales_avg delays_avg color_sales\n1          1     2   200              0.20     267.9       0.17     #FF0000\n2          1     1   400              0.04     267.9       0.17     #FF0000\n3          1     3   140              0.29     267.9       0.17     #FF0000\n4          1     4   390              0.11     267.9       0.17     #FF0000\n5          1     5   260              0.34     267.9       0.17     #FF0000\n6          1     6   130              0.23     267.9       0.17     #FF0000\n7          2     1   300              0.10     267.9       0.17     #FF0000\n8          2     2   317              0.07     267.9       0.17     #FF0000\n9          2     3   263              0.13     267.9       0.17     #FF0000\n10         2     4   142              0.21     267.9       0.17     #FF0000\n11         2     5   361              0.03     267.9       0.17     #FF0000\n12         2     6   134              0.16     267.9       0.17     #FF0000\n13         3     1   124              0.25     267.9       0.17     #FF0000\n14         3     2   374              0.23     267.9       0.17     #FF0000\n15         3     3   762              0.20     267.9       0.17     #FF0000\n16         3     4   163              0.27     267.9       0.17     #FF0000\n17         3     5   186              0.12     267.9       0.17     #FF0000\n18         3     6   177              0.09     267.9       0.17     #FF0000\n   color_delays_percentage\n1                  #00FF00\n2                  #00FF00\n3                  #00FF00\n4                  #00FF00\n5                  #00FF00\n6                  #00FF00\n7                  #00FF00\n8                  #00FF00\n9                  #00FF00\n10                 #00FF00\n11                 #00FF00\n12                 #00FF00\n13                 #00FF00\n14                 #00FF00\n15                 #00FF00\n16                 #00FF00\n17                 #00FF00\n18                 #00FF00\n```\n\n\n:::\n:::\n\n\n:::\n\n## Final result in PowerBI\nWith the following result I invite you to integrate R scripts with PowerBI so \nyou can create powerfull apps.\n\n![](/image/PowerBI_Final_Result.PNG){fig-align=\"center\"}",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}