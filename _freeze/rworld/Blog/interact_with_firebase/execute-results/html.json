{
  "hash": "b984aed0e1db5036bae67e159629415f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to interact with firebase from a shinyapp\"\ndescription: \"Find how to use `httr` to access or modify stored data in firebase.\" \ncategories: [\"Firebase\"]\ncomments: \n  utterances: \n    repo: ainsu23/ainsuasty\n---\n\n\nAt the planning phase of creating a shiny app you would find the importance of\nhaving storing data and interact with the stored system.\n\nYou might have interaction with data bases using `dbplyr`, `DBI`, among others\npackages. Reading this blog you will find how to use `httr` in order to access\nor modify stored data in firebase.\n\n## Interacting with firebase from R\nFirstly, you need to have all setup in firebase so R can connect trough API,\nit is recommended to store the API_KEY, firebase_url and password in the `.Renviron`\nfile in the root of the app (where ui.R and server.R are stored or app.R).\n\nSecondly, it is very important to be familiar with JSON structures in order to\ndesign how you are going to store your data in firebase.\n\nFrom previous, you might want to bring the information, update, delete, insert,\namong others. Let's build together the select.\n\n### Define JSON structure to store data\nIn my learning polish app, I design to have a list of words, this list would\ncontains a list of categories, and each of this would have the register with\nthe word, translation in spanish and date of insertion in a simple text.\n\nFor the purpose of the blog I am going to use a fragment of data from my\nlearning polish shiny app.\n\n\n::: {.cell}\n\n```{.json .cell-code}\n{\n  \"words\" : {\n    \"animals\" : [\n        \"pies: perro: 2022-01-23\",\n        \"kot: gato: 2022-01-23\",\n        \"biedronka: mariquita: 2022-01-23\",\n        \"Ptak: Pájaro: 2022-01-23\",\n        \"Komar: Mosquito: 2022-01-23\", ],\n    \"clothes\" : [\n        \"buty: zapatos:2022-01-26\",\n        \"spodnie: pantalón: 2022-01-30\",\n        \"sweter: sueter: 2022-02-22\",\n        \"krawat: corbata: 2022-02-22\",\n        \"koszula: camisa: 2022-02-22\" ],\n  }\n}\n```\n:::\n\n\n### Selecting data from firebase\nThe firebase url given by google is the place where your data is stored. It will\nlook somethis as followwing:\n\"https://name-hash_given_firebase-default-rtdb.firebaseio.com/\"\n\nIf you would like to access to the words inside the category clothes, you might\nadd the list words and clothes in the previous link, as follors:\n\n\"https://name-hash_given_firebase-default-rtdb.firebaseio.com/words/clothes\"\n\nIn the documentary from firebase, you can find that you need to add .json when\nyou are using an API (I invite you to read documentation to more detail).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_words <- function(categories) {\n    words <- httr::content(\n      httr::GET(\n        paste0(\n          Sys.getenv(\"FIREBASE_URL\"), \"/words/\", categories, \".json\")\n      )\n    ) %>%\n    purrr::flatten() %>%\n    unlist()\n  return(words)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_categories <- function() {\n  categories <- content(GET(\n    paste0(Sys.getenv(\"FIREBASE_URL\"), \"/words/.json\")\n  ))\n  return(categories)\n}\n```\n:::\n\n### Insert data to firebase:\n\nFor inserting data you can use the function PUT from `httr`. Into words variable\nwe bring the words from category so we can add the new word to already stored\nwords and converted to json with `jsonlite` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_words <- function(categories, word) {\n  if (word != \"\") {\n    words <- select_words(categories)\n    body <- jsonlite::toJSON(c(words, word),\n      pretty = TRUE\n    )\n    response <- httr::PUT(\n      paste0(Sys.getenv(\"FIREBASE_URL\"), \"/words/\", categories, \".json\"),\n      body = body\n    )\n  }\n}\n```\n:::\n\n\n### Delete data stored in firebase from R.\n\nThe following function receives the name of the category and one or more words\n(example: ptak and komar).\n\nThe first `purrr::map` compares each word with the list of words inside the category\nand save the position where it is stored in firebase.\n\nThe second `purrr::map` iterates over positions and tells firebase wich position\nto DELETE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelete_words <- function(categories, word) {\n  words_delete <- purrr::map(\n    .x = stringr::str_to_lower(word),\n    .f = function(.x) {\n      content(GET(\n        paste0(Sys.getenv(\"FIREBASE_URL\"), \"/words/\", categories, \".json\")\n      )) %>%\n        stringi::stri_trans_tolower(.) %>%\n        unique() %>%\n        stringr::str_starts(.x) %>%\n        which() - 1\n    }\n  )\n  purrr::map(\n    .x = words_delete,\n    .f = function(.x) {\n      httr::DELETE(\n        paste0(\n          Sys.getenv(\"FIREBASE_URL\"), \"words/\", categories, \"/\", .x, \".json\"\n        )\n      )\n    }\n  )\n}\n```\n:::\n\n\nThanks for reading. Any comments or feedback I would love to hear from you,\nyou can have my info from contact.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}